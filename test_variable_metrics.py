#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de prueba para verificar que las m√©tricas sean variables y reflejen diferencias reales
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from motor_analisis import (
    ensure_complete_diagnosis_generation,
    calculate_metrics_from_pairs,
    adjust_metrics_display
)

def test_variable_metrics():
    """Prueba que las m√©tricas sean variables y reflejen diferencias reales."""
    print("üß™ PRUEBA: M√©tricas Variables que Reflejan Diferencias Reales")
    print("=" * 80)
    
    # Casos de prueba con diferentes niveles de similitud
    test_cases = [
        {
            'name': 'Caso 1: Diagn√≥sticos Id√©nticos',
            'medico_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ],
            'deepseek_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ],
            'gemini_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ]
        },
        {
            'name': 'Caso 2: Diagn√≥sticos Similares',
            'medico_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ],
            'deepseek_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ],
            'gemini_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ]
        },
        {
            'name': 'Caso 3: Diagn√≥sticos Diferentes',
            'medico_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ],
            'deepseek_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ],
            'gemini_pairs': [
                ("ANEMIA LEVE", "Seguimiento de hemoglobina en 30 d√≠as"),
                ("DOLOR EN ARTICULACI√ìN RADIOCARPIANA", "Evaluaci√≥n traumatol√≥gica")
            ]
        }
    ]
    
    all_results = []
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{'='*60}")
        print(f"üìã {case['name']}")
        print(f"{'='*60}")
        
        print("üìä Diagn√≥sticos del m√©dico:")
        for j, (diag, rec) in enumerate(case['medico_pairs'], 1):
            print(f"  {j}. {diag} ‚Üí {rec}")
        
        print("\nü§ñ DeepSeek:")
        for j, (diag, rec) in enumerate(case['deepseek_pairs'], 1):
            print(f"  {j}. {diag} ‚Üí {rec}")
        
        print("\nü§ñ Gemini:")
        for j, (diag, rec) in enumerate(case['gemini_pairs'], 1):
            print(f"  {j}. {diag} ‚Üí {rec}")
        
        print("\nüìä Calculando m√©tricas...")
        
        try:
            # Calcular m√©tricas
            metrics = calculate_metrics_from_pairs(
                case['medico_pairs'], 
                case['deepseek_pairs'], 
                case['gemini_pairs']
            )
            
            print(f"\nüìà RESULTADOS PARA {case['name']}:")
            print("-" * 50)
            
            # DeepSeek
            print(f"ü§ñ DeepSeek:")
            print(f"  ‚Ä¢ Similitud Sem√°ntica: {metrics['deepseek_similarity']:.4f}")
            print(f"  ‚Ä¢ Kappa Cohen: {metrics['deepseek_kappa']:.4f}")
            print(f"  ‚Ä¢ Jaccard Similarity: {metrics['deepseek_jaccard']:.4f}")
            
            # Gemini
            print(f"\nü§ñ Gemini:")
            print(f"  ‚Ä¢ Similitud Sem√°ntica: {metrics['gemini_similarity']:.4f}")
            print(f"  ‚Ä¢ Kappa Cohen: {metrics['gemini_kappa']:.4f}")
            print(f"  ‚Ä¢ Jaccard Similarity: {metrics['gemini_jaccard']:.4f}")
            
            # Guardar resultados para comparaci√≥n
            all_results.append({
                'case': case['name'],
                'metrics': metrics
            })
            
        except Exception as e:
            print(f"‚ùå Error calculando m√©tricas para {case['name']}: {e}")
            import traceback
            traceback.print_exc()
    
    # An√°lisis de variabilidad
    print(f"\n{'='*80}")
    print("üìä AN√ÅLISIS DE VARIABILIDAD DE M√âTRICAS")
    print(f"{'='*80}")
    
    if len(all_results) >= 2:
        # Comparar m√©tricas entre casos
        print("\nüîç Comparaci√≥n entre casos:")
        
        for metric_name in ['deepseek_similarity', 'deepseek_kappa', 'deepseek_jaccard', 
                           'gemini_similarity', 'gemini_kappa', 'gemini_jaccard']:
            values = [result['metrics'][metric_name] for result in all_results]
            min_val = min(values)
            max_val = max(values)
            variation = max_val - min_val
            
            print(f"  {metric_name}:")
            print(f"    Rango: {min_val:.4f} - {max_val:.4f}")
            print(f"    Variaci√≥n: {variation:.4f}")
            
            if variation < 0.01:
                print(f"    ‚ö†Ô∏è VARIACI√ìN MUY BAJA (todas las m√©tricas son similares)")
            elif variation < 0.05:
                print(f"    ‚ö†Ô∏è VARIACI√ìN BAJA")
            elif variation < 0.1:
                print(f"    ‚úÖ VARIACI√ìN MODERADA")
            else:
                print(f"    ‚úÖ VARIACI√ìN ALTA (buena diferenciaci√≥n)")
        
        # Verificar si hay diferencias significativas
        total_variation = sum(max([result['metrics'][metric] for result in all_results]) - 
                             min([result['metrics'][metric] for result in all_results]) 
                             for metric in ['deepseek_similarity', 'deepseek_kappa', 'deepseek_jaccard', 
                                           'gemini_similarity', 'gemini_kappa', 'gemini_jaccard'])
        
        print(f"\nüìä RESUMEN DE VARIABILIDAD:")
        print(f"  ‚Ä¢ Variaci√≥n total: {total_variation:.4f}")
        
        if total_variation < 0.1:
            print("  ‚ö†Ô∏è PROBLEMA: Las m√©tricas son muy similares entre casos")
            print("  üí° Recomendaci√≥n: Ajustar el algoritmo para mayor variabilidad")
        elif total_variation < 0.3:
            print("  ‚ö†Ô∏è MEJORABLE: Las m√©tricas tienen variaci√≥n moderada")
            print("  üí° Recomendaci√≥n: Considerar ajustes adicionales")
        else:
            print("  ‚úÖ BUENO: Las m√©tricas tienen buena variabilidad")
            print("  üí° El sistema refleja correctamente las diferencias")
    
    return all_results

def main():
    """Funci√≥n principal de prueba."""
    print("üöÄ INICIANDO PRUEBAS DE VARIABILIDAD DE M√âTRICAS")
    print("=" * 80)
    
    try:
        # Prueba de variabilidad
        results = test_variable_metrics()
        
        print("\nüéâ PRUEBAS COMPLETADAS")
        print("=" * 80)
        
        if results:
            print("üìä RESUMEN FINAL:")
            for i, result in enumerate(results, 1):
                metrics = result['metrics']
                print(f"  Caso {i}: {result['case']}")
                print(f"    DeepSeek - Similitud: {metrics['deepseek_similarity']:.4f}, Kappa: {metrics['deepseek_kappa']:.4f}, Jaccard: {metrics['deepseek_jaccard']:.4f}")
                print(f"    Gemini - Similitud: {metrics['gemini_similarity']:.4f}, Kappa: {metrics['gemini_kappa']:.4f}, Jaccard: {metrics['gemini_jaccard']:.4f}")
        
    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
